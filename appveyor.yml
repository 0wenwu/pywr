# Based on appveyor.yml from https://github.com/Toblerity/Fiona

environment:

  global:
    BUILD_HOME: "C:\\build"
    GLPK_VER: "4.65"
    GLPK_HOME: "C:\\glpk-%GLPK_VER%"
    GLPK_LIB: "glpk_4_65.dll"
    GLPK_URL: "https://sourceforge.net/projects/winglpk/files/build-winglpk/build-winglpk-%GLPK_VER%/build-winglpk-%GLPK_VER%.tar.gz/download"
    PYTHON_ARCH: "64"

  matrix:
    # Python 3.6
    - PYTHON: "C:\\Python36-x64"

    # Python 3.7
    - PYTHON: "C:\\Python37-x64"



# We always use a 64-bit machine, but can build x86 distributions
# with the TARGET_ARCH variable.
platform:
    - x64

install:
    - ECHO "Filesystem root:"
    - ps: "ls \"C:/\""

    - "SET PATH=%PYTHON%;%PYTHON%\\Scripts;%PATH%"
    - "SET PYTHONPATH=%PYTHON%\\Lib\\site-packages;%PYTHONPATH%"

    - "python --version"
    - "python -c \"import struct; print(struct.calcsize('P') * 8)\""

    # Create working directories
    - ps: mkdir %BUILD_HOME% | out-null
    - ps: mkdir %GLPK_HOME% | out-null
    - ps: mkdir %LPSOLVE_HOME% | out-null

    - curl -L %GLPK_URL% --output glpk.tar.gz
    - 7z e glpk.tar.gz && 7z x glpk.tar -oC:\
    - cmd: echo "Installed GLPK:"
    - ps: ls %GLPK_HOME%

    - "SET PACKAGE_DATA=1"

    - cd C:\projects\pywr
    # Upgrade to the latest version of pip to avoid it displaying warnings
    # about it being out of date.
    - cmd: python -m pip install --disable-pip-version-check --user --upgrade pip

    - cmd: pip --version
    # Install the build dependencies of the project. If some dependencies contain
    # compiled extensions and are not provided as pre-built wheel packages,
    # pip will build them from source using the MSVC compiler matching the
    # target Python version and architecture
    - "pip install cython packaging numpy pytest"

build_script:
  # Build the compiled extension
  - cmd: echo %PATH%
  - cmd: echo %PYTHONPATH%

  # Copy GLPK libraries to package
  - cmd: xcopy %GLPK_HOME%\w64\%GLPK_LIB% pywr\.libs\
  - cmd: xcopy %GLPK_HOME%\COPYING pywr\.libs\licenses\

  # build fiona and create a wheel
  - "python setup.py build_ext -I%GLPK_HOME$\\include --with-glpk bdist_wheel"

  # install the wheel
  # - ps: python -m pip install --upgrade pip
  - cmd: FOR %%i in (dist\*.whl) DO pip install --force-reinstall --ignore-installed %%i
  - cmd: move pywr pywr.build

test_script:
  # Run the project tests
  - cmd: SET

  - ps: python -c "import pywr"
  - ps: python -c "from pywr.solvers import cython_glpk"

  - "SET PYWR_SOLVER=glpk"
  - "python -m pytest"

  - "SET PYWR_SOLVER=glpk-edge"
  - "python -m pytest"
